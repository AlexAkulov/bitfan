//go:generate bitfanDoc -codec csv
// Parses comma-separated value data into individual fields
package csvcodec

import (
	"encoding/csv"
	"fmt"
	"io"

	"github.com/mitchellh/mapstructure"
)

type decoder struct {
	more        bool
	r           *csv.Reader
	columnnames []string
	options     options
	comma       rune
}

// Parses comma-separated value data into individual fields
type options struct {

	// Define the column separator value. If this is not specified, the default is a comma ,. Optional
	// @Default ","
	Separator string

	// Define whether column names should autogenerated or not. Defaults to true.
	// If set to false, columns not having a header specified will not be parsed.
	// @Default true
	AutogenerateColumnNames bool `mapstructure:"autogenerate_column_names"`

	// Define the character used to quote CSV fields. If this is not specified the default is a double quote ". Optional.
	// @Default "\""
	QuoteChar string `mapstructure:"quote_char"`

	// Define a list of column names (in the order they appear in the CSV, as
	// if it were a header line).
	//
	// If columns is not configured, or there are not enough columns specified,
	// the default column names are "column1", "column2", etc.
	//
	// In the case that there are more columns in the data than specified in this column
	// list, extra columns will be auto-numbered:
	// (e.g. "user_defined_1", "user_defined_2", "column3", "column4", etc.)
	Columns []string
}

func NewDecoder(r io.Reader) *decoder {
	d := &decoder{
		r:    csv.NewReader(r),
		more: true,
		options: options{
			Separator:               ",",
			AutogenerateColumnNames: true,
			QuoteChar:               "\"",
		},
		comma: ',',
	}

	return d
}
func (d *decoder) SetOptions(conf map[string]interface{}) error {

	if err := mapstructure.Decode(conf, &d.options); err != nil {
		return err
	}

	d.r.Comma = []rune(d.options.Separator)[0]
	d.comma = d.r.Comma
	return nil
}

func (d *decoder) Decode() (map[string]interface{}, error) {
	data := map[string]interface{}{}
	record, err := d.r.Read()
	if err == io.EOF {
		d.more = false
		return data, err
	}

	if d.columnnames == nil {
		d.columnnames = record
		return nil, nil
	}

	for i, v := range d.columnnames {
		if true == d.options.AutogenerateColumnNames {
			data[v] = record[i]
		} else {
			data[fmt.Sprintf("col_%d", i)] = record[i]
		}
	}

	return data, nil
}

func (d *decoder) More() bool {
	return d.more
}
