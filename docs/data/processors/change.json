{
  "Doc": "This rule will monitor a certain field and match if that field changes. The field must change with respect to the last event",
  "DocShort": "drop event when field value is the same in the last event",
  "ImportPath": "/Users/sodadi/go/src/github.com/vjeantet/bitfan/processors/filter-change",
  "Name": "change",
  "Options": {
    "Doc": "",
    "Options": [
      {
        "Alias": "add_field",
        "DefaultValue": null,
        "Doc": "If this filter is successful, add any arbitrary fields to this event.",
        "ExampleLS": "",
        "Name": "AddField",
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "add_tag",
        "DefaultValue": null,
        "Doc": "If this filter is successful, add arbitrary tags to the event. Tags can be dynamic\nand include parts of the event using the %{field} syntax.",
        "ExampleLS": "",
        "Name": "AddTag",
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "remove_field",
        "DefaultValue": null,
        "Doc": "If this filter is successful, remove arbitrary fields from this event. Example:\n```\nkv {\n  remove_field =\u003e [ \"foo_%{somefield}\" ]\n}\n```",
        "ExampleLS": "",
        "Name": "RemoveField",
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "remove_tag",
        "DefaultValue": null,
        "Doc": "If this filter is successful, remove arbitrary tags from the event. Tags can be dynamic and include parts of the event using the %{field} syntax.\n\nExample:\n```\nkv {\n  remove_tag =\u003e [ \"foo_%{somefield}\" ]\n}\n```\nIf the event has field \"somefield\" == \"hello\" this filter, on success, would remove the tag foo_hello if it is present. The second example would remove a sad, unwanted tag as well.",
        "ExampleLS": "",
        "Name": "RemoveTag",
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "compare_field",
        "DefaultValue": null,
        "Doc": "The name of the field to use to compare to the blacklist.\n\nIf the field is null, those events will be ignored.",
        "ExampleLS": "compare_field =\u003e \"message\"",
        "Name": "CompareField",
        "Required": true,
        "Type": "string"
      },
      {
        "Alias": "ignore_missing",
        "DefaultValue": "true",
        "Doc": "If true, events without a compare_key field will not count as changed.",
        "ExampleLS": "",
        "Name": "IgnoreMissing",
        "Required": false,
        "Type": "bool"
      },
      {
        "Alias": "timeframe",
        "DefaultValue": "0 (no timeframe)",
        "Doc": "The maximum time in seconds between changes. After this time period, Bitfan will forget the old value of the compare_field field.",
        "ExampleLS": "timeframe =\u003e 10",
        "Name": "Timeframe",
        "Required": false,
        "Type": "int"
      }
    ]
  },
  "Ports": [
    {
      "Default": true,
      "Doc": "",
      "Name": "PORT_SUCCESS",
      "Number": 0
    }
  ]
}