{
  "Doc": "",
  "DocShort": "drop event when field value is the same in the last event",
  "ImportPath": "/Users/sodadi/go/src/github.com/vjeantet/bitfan/processors/filter-exec",
  "Name": "exec",
  "Options": {
    "Doc": "",
    "Options": [
      {
        "Alias": "add_field",
        "DefaultValue": null,
        "Doc": "If this filter is successful, add any arbitrary fields to this event.",
        "ExampleLS": "",
        "Name": "AddField",
        "PossibleValues": null,
        "Required": false,
        "Type": "hash"
      },
      {
        "Alias": "add_tag",
        "DefaultValue": null,
        "Doc": "If this filter is successful, add arbitrary tags to the event. Tags can be dynamic\nand include parts of the event using the %{field} syntax.",
        "ExampleLS": "",
        "Name": "AddTag",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "remove_field",
        "DefaultValue": null,
        "Doc": "If this filter is successful, remove arbitrary fields from this event. Example:\n` kv {\n`   remove_field =\u003e [ \"foo_%{somefield}\" ]\n` }",
        "ExampleLS": "",
        "Name": "RemoveField",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "remove_tag",
        "DefaultValue": null,
        "Doc": "If this filter is successful, remove arbitrary tags from the event. Tags can be dynamic and include parts of the event using the %{field} syntax.\nExample:\n` kv {\n`   remove_tag =\u003e [ \"foo_%{somefield}\" ]\n` }\nIf the event has field \"somefield\" == \"hello\" this filter, on success, would remove the tag foo_hello if it is present. The second example would remove a sad, unwanted tag as well.",
        "ExampleLS": "",
        "Name": "RemoveTag",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "command",
        "DefaultValue": null,
        "Doc": "",
        "ExampleLS": "",
        "Name": "Command",
        "PossibleValues": null,
        "Required": true,
        "Type": "string"
      },
      {
        "Alias": "args",
        "DefaultValue": null,
        "Doc": "",
        "ExampleLS": "",
        "Name": "Args",
        "PossibleValues": null,
        "Required": false,
        "Type": "array"
      },
      {
        "Alias": "stdin",
        "DefaultValue": "false",
        "Doc": "Pass the complete event to stdin as a json string",
        "ExampleLS": "",
        "Name": "Stdin",
        "PossibleValues": null,
        "Required": false,
        "Type": "bool"
      },
      {
        "Alias": "target",
        "DefaultValue": "\"stdout\"",
        "Doc": "Where do the output should be stored\nSet \".\" when output is json formated and want to replace current event fields with output\nresponse. (usefull )",
        "ExampleLS": "",
        "Name": "Target",
        "PossibleValues": null,
        "Required": false,
        "Type": "string"
      },
      {
        "Alias": "codec",
        "DefaultValue": "\"plain\"",
        "Doc": "The codec used for input data. Input codecs are a convenient method for decoding\nyour data before it enters the input, without needing a separate filter in your bitfan pipeline",
        "ExampleLS": "",
        "Name": "Codec",
        "PossibleValues": null,
        "Required": false,
        "Type": "codec"
      }
    ]
  },
  "Ports": [
    {
      "Default": true,
      "Doc": "",
      "Name": "PORT_SUCCESS",
      "Number": 0
    }
  ]
}