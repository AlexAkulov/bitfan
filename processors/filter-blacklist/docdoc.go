// Code generated by "bitfanDoc "; DO NOT EDIT
package blacklist

import "github.com/vjeantet/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:     "blacklist",
  Doc:      "The blacklist rule will check a certain field against a blacklist, and match if it is in the blacklist.",
  DocShort: "drop event when term not in a given list",
  Options:  &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:         "AddField",
        Alias:        "add_field",
        Doc:          "If this filter is successful, add any arbitrary fields to this event.",
        Required:     false,
        Type:         "hash",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "AddTag",
        Alias:        "add_tag",
        Doc:          "If this filter is successful, add arbitrary tags to the event. Tags can be dynamic\nand include parts of the event using the %{field} syntax.",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "RemoveField",
        Alias:        "remove_field",
        Doc:          "If this filter is successful, remove arbitrary fields from this event. Example:\n` kv {\n`   remove_field => [ \"foo_%{somefield}\" ]\n` }",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "RemoveTag",
        Alias:        "remove_tag",
        Doc:          "If this filter is successful, remove arbitrary tags from the event. Tags can be dynamic and include parts of the event using the %{field} syntax.\nExample:\n` kv {\n`   remove_tag => [ \"foo_%{somefield}\" ]\n` }\nIf the event has field \"somefield\" == \"hello\" this filter, on success, would remove the tag foo_hello if it is present. The second example would remove a sad, unwanted tag as well.",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "CompareField",
        Alias:        "compare_field",
        Doc:          "The name of the field to use to compare to the blacklist.\nIf the field is null, those events will be ignored.",
        Required:     true,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "compare_field => \"message\"",
      },
      &doc.ProcessorOption{
        Name:         "List",
        Alias:        "list",
        Doc:          "A list of blacklisted values.\nThe compare_field term must be equal to one of these values for it to match.",
        Required:     true,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "list => [\"val1\",\"val2\",\"val3\"]",
      },
    },
  },
  Ports: []*doc.ProcessorPort{
    &doc.ProcessorPort{
      Default: true,
      Name:    "PORT_SUCCESS",
      Number:  0,
      Doc:     "",
    },
  },
}
}