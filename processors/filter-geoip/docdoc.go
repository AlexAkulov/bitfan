// Code generated by "bitfanDoc "; DO NOT EDIT
package geoip

import "github.com/vjeantet/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:       "geoip",
  ImportPath: "/Users/sodadi/go/src/github.com/vjeantet/bitfan/processors/filter-geoip",
  Doc:        "",
  DocShort:   "Adds geographical information about an IP address",
  Options:    &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:           "AddField",
        Alias:          "add_field",
        Doc:            "If this filter is successful, add any arbitrary fields to this event.\nField names can be dynamic and include parts of the event using the %{field}.",
        Required:       false,
        Type:           "hash",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "AddTag",
        Alias:          "add_tag",
        Doc:            "If this filter is successful, add arbitrary tags to the event.\nTags can be dynamic and include parts of the event using the %{field} syntax.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Database",
        Alias:          "database",
        Doc:            "Path or URL to the MaxMind GeoIP2 database.\nDefault value is \"http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz\"\nNote that URL can point to gzipped database (*.mmdb.gz) but local path must point to an unzipped file.",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "DatabaseType",
        Alias:          "database_type",
        Doc:            "Type of GeoIP database. Default value is \"city\"\nMust be one of \"city\", \"asn\", \"isp\" or \"organization\".",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "RefreshInterval",
        Alias:          "refresh_interval",
        Doc:            "GeoIP database refresh interval, in minutes. Default value is 60\nIf `database` field is a path, file will be reloaded from disk.\nIf it is an URL, database will be fetched (if ETAG differs) and reloaded.",
        Required:       false,
        Type:           "time.Duration",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Fields",
        Alias:          "fields",
        Doc:            "An array of geoip fields to be included in the event.\nPossible fields depend on the database type. By default, all geoip fields are included in the event.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "LruCacheSize",
        Alias:          "lru_cache_size",
        Doc:            "Cache size. Default value is 1000",
        Required:       false,
        Type:           "int64",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "RemoveField",
        Alias:          "remove_field",
        Doc:            "If this filter is successful, remove arbitrary fields from this event.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "RemoveTag",
        Alias:          "remove_tag",
        Doc:            "If this filter is successful, remove arbitrary tags from the event.\nTags can be dynamic and include parts of the event using the %{field} syntax",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Source",
        Alias:          "source",
        Doc:            "The field containing the IP address or hostname to map via geoip.",
        Required:       true,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "TagOnFailure",
        Alias:          "tag_on_failure",
        Doc:            "Append values to the tags field when there has been no successful match\nDefault value is [\"_geoipparsefailure\"]",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Target",
        Alias:          "target",
        Doc:            "Define the target field for placing the parsed data. If this setting is omitted,\nthe geoip data will be stored at the root (top level) of the event",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Language",
        Alias:          "language",
        Doc:            "Language to use for city/region/continent names",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
    },
  },
  Ports: []*doc.ProcessorPort{},
}
}