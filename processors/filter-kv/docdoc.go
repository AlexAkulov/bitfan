// Code generated by "bitfanDoc "; DO NOT EDIT
package kv

import "github.com/vjeantet/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:       "kv",
  ImportPath: "/Users/sodadi/go/src/github.com/vjeantet/bitfan/processors/filter-kv",
  Doc:        "This filter helps automatically parse messages (or specific event fields)\nwhich are of the foo=bar variety.",
  DocShort:   "Parses key-value pairs",
  Options:    &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:         "AddField",
        Alias:        "add_field",
        Doc:          "If this filter is successful, add any arbitrary fields to this event.",
        Required:     false,
        Type:         "hash",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "AddTag",
        Alias:        "add_tag",
        Doc:          "If this filter is successful, add arbitrary tags to the event. Tags can be dynamic\nand include parts of the event using the %{field} syntax.",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "AllowDuplicateValues",
        Alias:        "allow_duplicate_values",
        Doc:          "A bool option for removing duplicate key/value pairs.\nWhen set to false, only one unique key/value pair will be preserved.\nFor example, consider a source like from=me from=me.\n[from] will map to an Array with two elements: [\"me\", \"me\"].\nto only keep unique key/value pairs, you could use this configuration\n` kv {\n`   allow_duplicate_values => false\n` }",
        Required:     false,
        Type:         "bool",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "DefaultKeys",
        Alias:        "default_keys",
        Doc:          "A hash specifying the default keys and their values which should be added\nto the event in case these keys do not exist in the source field being parsed.\nExample\n`kv {\n`  default_keys => { \"from\"=> \"logstash@example.com\",\n`                   \"to\"=> \"default@dev.null\" }\n`}",
        Required:     false,
        Type:         "hash",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "ExcludeKeys",
        Alias:        "exclude_keys",
        Doc:          "An array specifying the parsed keys which should not be added to the event.\nBy default no keys will be excluded.\nFor example, consider a source like Hey, from=<abc>, to=def foo=bar.\nTo exclude from and to, but retain the foo key, you could use this configuration:\n`kv {\n`  exclude_keys => [ \"from\", \"to\" ]\n`}",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "FieldSplit",
        Alias:        "field_split",
        Doc:          "A string of characters to use as delimiters for parsing out key-value pairs.\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\n## Example with URL Query Strings\nFor example, to split out the args from a url query string such as ?pin=12345~0&d=123&e=foo@bar.com&oq=bobo&ss=12345:\n` kv {\n`   field_split => \"&?\"\n` }\nThe above splits on both & and ? characters, giving you the following fields:\n* pin: 12345~0\n* d: 123\n* e: foo@bar.com\n* oq: bobo\n* ss: 12345",
        Required:     false,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "IncludeBrackets",
        Alias:        "include_brackets",
        Doc:          "A boolean specifying whether to include brackets as value wrappers (the default is true)\n` kv {\n`   include_brackets => true\n` }\nFor example, the result of this line: bracketsone=(hello world) bracketstwo=[hello world]\nwill be:\n* bracketsone: hello world\n* bracketstwo: hello world\ninstead of:\n* bracketsone: (hello\n* bracketstwo: [hello",
        Required:     false,
        Type:         "bool",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "IncludeKeys",
        Alias:        "include_keys",
        Doc:          "An array specifying the parsed keys which should be added to the event. By default all keys will be added.\nFor example, consider a source like Hey, from=<abc>, to=def foo=bar. To include from and to, but exclude the foo key, you could use this configuration:\n` kv {\n` include_keys => [ \"from\", \"to\" ]\n` }",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "Prefix",
        Alias:        "",
        Doc:          "A string to prepend to all of the extracted keys.\nFor example, to prepend arg_ to all keys:\n` kv {\n`   prefix => \"arg_\" }\n` }",
        Required:     false,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "Recursive",
        Alias:        "",
        Doc:          "A boolean specifying whether to drill down into values and recursively get more key-value pairs from it. The extra key-value pairs will be stored as subkeys of the root key.\nDefault is not to recursive values.\n` kv {\n`  recursive => \"true\"\n` }",
        Required:     false,
        Type:         "bool",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "RemoveField",
        Alias:        "remove_field",
        Doc:          "If this filter is successful, remove arbitrary fields from this event. Example:\n` kv {\n`   remove_field => [ \"foo_%{somefield}\" ]\n` }",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "RemoveTag",
        Alias:        "remove_tag",
        Doc:          "If this filter is successful, remove arbitrary tags from the event. Tags can be dynamic and include parts of the event using the %{field} syntax.\nExample:\n` kv {\n`   remove_tag => [ \"foo_%{somefield}\" ]\n` }\nIf the event has field \"somefield\" == \"hello\" this filter, on success, would remove the tag foo_hello if it is present. The second example would remove a sad, unwanted tag as well.",
        Required:     false,
        Type:         "array",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "Source",
        Alias:        "",
        Doc:          "The field to perform key=value searching on\nFor example, to process the not_the_message field:\n` kv { source => \"not_the_message\" }",
        Required:     false,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "Target",
        Alias:        "",
        Doc:          "The name of the container to put all of the key-value pairs into.\nIf this setting is omitted, fields will be written to the root of the event, as individual fields.\nFor example, to place all keys into the event field kv:\n` kv { target => \"kv\" }",
        Required:     false,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "Trim",
        Alias:        "",
        Doc:          "A string of characters to trim from the value. This is useful if your values are wrapped in brackets or are terminated with commas (like postfix logs).\nFor example, to strip <, >, [, ] and , characters from values:\n` kv {\n`   trim => \"<>[],\"\n` }",
        Required:     false,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "Trimkey",
        Alias:        "trimkey",
        Doc:          "A string of characters to trim from the key. This is useful if your keys are wrapped in brackets or start with space.\nFor example, to strip < > [ ] and , characters from keys:\n` kv {\n`   trimkey => \"<>[],\"\n` }",
        Required:     false,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "",
      },
      &doc.ProcessorOption{
        Name:         "ValueSplit",
        Alias:        "value_split",
        Doc:          "A string of characters to use as delimiters for identifying key-value relations.\nThese characters form a regex character class and thus you must escape special regex characters like [ or ] using \\.\nFor example, to identify key-values such as key1:value1 key2:value2:\n` { kv { value_split => \":\" }",
        Required:     false,
        Type:         "string",
        DefaultValue: nil,
        ExampleLS:    "",
      },
    },
  },
  Ports: []*doc.ProcessorPort{
    &doc.ProcessorPort{
      Default: true,
      Name:    "PORT_SUCCESS",
      Number:  0,
      Doc:     "",
    },
  },
}
}