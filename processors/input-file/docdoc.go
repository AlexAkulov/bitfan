// Code generated by "bitfanDoc "; DO NOT EDIT
package file

import "github.com/vjeantet/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:       "file",
  ImportPath: "/Users/sodadi/go/src/github.com/vjeantet/bitfan/processors/input-file",
  Doc:        "",
  DocShort:   "",
  Options:    &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:           "Add_field",
        Alias:          "",
        Doc:            "If this filter is successful, add any arbitrary fields to this event.",
        Required:       false,
        Type:           "hash",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Tags",
        Alias:          "",
        Doc:            "If this filter is successful, add arbitrary tags to the event. Tags can be dynamic\nand include parts of the event using the %{field} syntax.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Type",
        Alias:          "",
        Doc:            "Add a type field to all events handled by this input",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Codec",
        Alias:          "codec",
        Doc:            "The codec used for input data. Input codecs are a convenient method for decoding\nyour data before it enters the input, without needing a separate filter in your bitfan pipeline",
        Required:       false,
        Type:           "codec",
        DefaultValue:   "\"plain\"",
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "ReadOlder",
        Alias:          "read_older",
        Doc:            "How many seconds a file should stay unmodified to be read\nuse this to prevent reading a file while another process is writing into.",
        Required:       false,
        Type:           "int",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "DiscoverInterval",
        Alias:          "discover_interval",
        Doc:            "How often (in seconds) we expand the filename patterns in the path option\nto discover new files to watch. Default value is 15",
        Required:       false,
        Type:           "int",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Exclude",
        Alias:          "exclude",
        Doc:            "Exclusions (matched against the filename, not full path).\nFilename patterns are valid here, too.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "IgnoreOlder",
        Alias:          "ignore_older",
        Doc:            "When the file input discovers a file that was last modified before the\nspecified timespan in seconds, the file is ignored.\nAfter itâ€™s discovery, if an ignored file is modified it is no longer ignored\nand any new data is read.\nDefault value is 86400 (i.e. 24 hours)",
        Required:       false,
        Type:           "int",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "MaxOpenFiles",
        Alias:          "max_open_files",
        Doc:            "What is the maximum number of file_handles that this input consumes at any one time.\nUse close_older to close some files if you need to process more files than this number.",
        Required:       false,
        Type:           "int",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Path",
        Alias:          "path",
        Doc:            "The path(s) to the file(s) to use as an input.\nYou can use filename patterns here, such as /var/log/*.log.\nIf you use a pattern like /var/log/**/*.log, a recursive search of /var/log\nwill be done for all *.log files.\nPaths must be absolute and cannot be relative.\nYou may also configure multiple paths.",
        Required:       true,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "SincedbPath",
        Alias:          "sincedb_path",
        Doc:            "Path of the sincedb database file\nThe sincedb database keeps track of the current position of monitored\nlog files that will be written to disk.",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
    },
  },
  Ports: []*doc.ProcessorPort{},
}
}