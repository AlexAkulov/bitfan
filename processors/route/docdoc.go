// Code generated by "bitfanDoc "; DO NOT EDIT
package route

import "github.com/vjeantet/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:       "route",
  ImportPath: "/Users/sodadi/go/src/github.com/vjeantet/bitfan/processors/route",
  Doc:        "This processor, depending on the condition evaluation, will route message to\none or more different pipelines and/or pass the message through the processor to the next one.\nBehavior :\n\n* WHEN Condition is evaluated to true THEN the message go to the pipelines set in Path\n* WHEN Condition is evaluated to true AND Fork set to true THEN the message go to the pipeline set in Path AND pass through.\n* WHEN Condition is evaluated to false THEN the message pass through.\n* WHEN Condition is evaluated to false AND Fork set to true THEN the message  pass through.",
  DocShort:   "route message to other pipelines",
  Options:    &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:           "Add_field",
        Alias:          "",
        Doc:            "If this processor is successful, add any arbitrary fields to this event.",
        Required:       false,
        Type:           "hash",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Add_tag",
        Alias:          "",
        Doc:            "If this processor is successful, add arbitrary tags to the event.\nTags can be dynamic and include parts of the event using the %{field} syntax.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Condition",
        Alias:          "condition",
        Doc:            "set a condition to fork and route message\nwhen false, message is routed to trunk\nBy default condition is evaluated to true and always pass",
        Required:       false,
        Type:           "string",
        DefaultValue:   "true",
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Fork",
        Alias:          "fork",
        Doc:            "Fork mode disabled by default",
        Required:       false,
        Type:           "bool",
        DefaultValue:   "false",
        PossibleValues: []string{},
        ExampleLS:      "fork => false",
      },
      &doc.ProcessorOption{
        Name:           "Remove_field",
        Alias:          "",
        Doc:            "If this processor is successful, remove arbitrary fields from this event.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Remove_tag",
        Alias:          "",
        Doc:            "If this processor is successful, remove arbitrary tags from the event.\nTags can be dynamic and include parts of the event using the %{field} syntax",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Type",
        Alias:          "",
        Doc:            "Add a type field to all events handled by this processor",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Path",
        Alias:          "path",
        Doc:            "Path to configuration to send the incomming message, it could be a local file or an url\ncan be relative path to the current configuration.",
        Required:       true,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "path=> [\"error.conf\"]",
      },
      &doc.ProcessorOption{
        Name:           "Var",
        Alias:          "var",
        Doc:            "You can set variable references in the used configuration by using ${var}.\neach reference will be replaced by the value of the variable found in this option\nThe replacement is case-sensitive.",
        Required:       false,
        Type:           "hash",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "var => {\"hostname\"=>\"myhost\",\"varname\"=>\"varvalue\"}",
      },
    },
  },
  Ports: []*doc.ProcessorPort{
    &doc.ProcessorPort{
      Default: true,
      Name:    "PORT_SUCCESS",
      Number:  0,
      Doc:     "",
    },
    &doc.ProcessorPort{
      Default: false,
      Name:    "PORT_TRUNK",
      Number:  1,
      Doc:     "",
    },
  },
}
}